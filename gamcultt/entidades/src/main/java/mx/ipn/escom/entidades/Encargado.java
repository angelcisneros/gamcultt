package mx.ipn.escom.entidades;
// Generated 8/04/2015 05:34:35 PM by Hibernate Tools 4.3.1



import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


/**
 * Encargado generated by hbm2java
 */
@Entity
@Table(name="encargado"
    ,catalog="gamcultt"
)
public class Encargado  implements java.io.Serializable {

    @GenericGenerator(name="generator", strategy="foreign", parameters=@Parameter(name="property", value="usuario"))@Id @GeneratedValue(generator="generator")
    @Column(name="id", unique=true, nullable=false)
    @Getter @Setter private int id;
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="casa", nullable=false)
    @Getter @Setter private Casa casa;
    @OneToOne(fetch=FetchType.LAZY)@PrimaryKeyJoinColumn
    @Getter @Setter private Usuario usuario;
    @Column(name="telefono", length=45)
    @Getter @Setter private String telefono;
    @Column(name="password", length=45)
    @Getter @Setter private String contrasena;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="encargado")
    @Getter @Setter private List<Propuesta> propuestas ;
    
    public Encargado() {
    }

	
    public Encargado(Casa casa, Usuario usuario) {
        this.casa = casa;
        this.usuario = usuario;
    }
    public Encargado(Casa casa, Usuario usuario, String telefono, String contrasena, List<Propuesta> propuestas) {
       this.casa = casa;
       this.usuario = usuario;
       this.telefono = telefono;
       this.contrasena = contrasena;
       this.propuestas = propuestas;
    }
}


